{"version":3,"sources":["lib/Minesweeper.ts","components/GameContext.ts","components/Cell.tsx","components/Board.tsx","utils/parsePositiveNumber.ts","components/GameSetup.tsx","components/Game.tsx","App.tsx","index.tsx"],"names":["GameState","BOMB","ActionType","Minesweeper","rows","columns","bombs","state","NotStarted","board","maxCol","maxRow","nearbyHidden","this","maxBombs","row","column","Lost","Won","distributeBombs","Started","openCells","undefined","i","j","queue","length","pop","push","bombRow","bombColumn","bombsLeft","Math","floor","random","initNearbyCells","reducer","type","payload","SetParams","params","minesweeper","Check","check","GameContext","createContext","dispatch","CELL_STYLE","width","height","Cell","rowIndex","columnIndex","style","onClick","onContextMenu","flag","useContext","val","body","className","data-row","data-column","disabled","getCoordinates","target","parseInt","dataset","Board","useResizeObserver","ref","useState","flags","setFlags","useEffect","handleClick","e","handleContextMenu","preventDefault","newFlags","columnCount","rowCount","columnWidth","rowHeight","props","parsePositiveNumber","input","result","GameSetup","startButtonBody","formData","setFormData","handleChange","id","value","formIsValid","Object","values","every","onSubmit","htmlFor","name","autoComplete","toString","onChange","initialParams","initialState","Game","useReducer","Provider","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ab46aa7.chunk.js","sourcesContent":["export interface GameParameters {\n  rows: number;\n  columns: number;\n  bombs: number;\n}\n\nexport type CellCoordinates = number[];\n\nexport const BOMB = -1;\nexport const OPENED = 0;\n\nexport enum GameState {\n  NotStarted = \"Game not started\",\n  Started = \"Game started\",\n  Lost = \"Game lost\",\n  Won = \"Game won\",\n}\n\n// Possible values (numbers) that could be placed on the board:\n// -1 is a bomb\n// 0 is an open cell\n// everything lower than -1 is a hint of nearby bomb, example:\n//   -3 shows that there're 2 bombs nearby\n//   -2 shows that there's 1 bomb nearby\n// positive numbers show that the hint cell is opened, example:\n//    2 shows that there's 2 bombs nearby\n\nclass Minesweeper {\n  state: GameState = GameState.NotStarted;\n  board: number[][] = [];\n  private bombs: number = 0;\n  private maxCol: number = 0;\n  private maxRow: number = 0;\n  private nearbyHidden: number = 0;\n\n  constructor({ rows, columns, bombs }: GameParameters) {\n    this.maxCol = columns - 1;\n    this.maxRow = rows - 1;\n    const maxBombs = rows * columns - 1;\n    this.bombs = bombs > maxBombs ? maxBombs : bombs;\n  }\n\n  check([row, column]: CellCoordinates): GameState {\n    switch (this.state) {\n      case GameState.Lost:\n      case GameState.Won:\n        break;\n\n      case GameState.NotStarted:\n        this.distributeBombs(row, column);\n        this.state = GameState.Started;\n        this.openCells(row, column);\n        break;\n\n      default:\n        if (this.board[row] !== undefined && this.board[row][column] === BOMB) {\n          this.state = GameState.Lost;\n          return this.state;\n        }\n        this.openCells(row, column);\n        break;\n    }\n    return this.state;\n  }\n\n  private openCells(row: number, column: number) {\n    const queue: number[] = [row, column];\n\n    let i: number;\n    let j: number;\n    while (queue.length > 1) {\n      j = queue.pop() as number;\n      i = queue.pop() as number;\n\n      if (this.board[i] === undefined) {\n        this.board[i] = [];\n      }\n\n      if (this.board[i][j] < BOMB) {\n        this.board[i][j] = this.board[i][j] * -1 - 1;\n        this.nearbyHidden--;\n        if (this.nearbyHidden === 0) {\n          this.state = GameState.Won;\n          return;\n        }\n        continue;\n      }\n\n      if (this.board[i][j] === undefined) {\n        this.board[i][j] = 0;\n        if (\n          i - 1 >= 0 &&\n          (this.board[i - 1] === undefined ||\n            this.board[i - 1][j] === undefined ||\n            this.board[i - 1][j] < BOMB)\n        ) {\n          queue.push(i - 1, j);\n        }\n        if (\n          i + 1 <= this.maxRow &&\n          (this.board[i + 1] === undefined ||\n            this.board[i + 1][j] === undefined ||\n            this.board[i + 1][j] < BOMB)\n        ) {\n          queue.push(i + 1, j);\n        }\n        if (\n          j - 1 >= 0 &&\n          (this.board[i] === undefined ||\n            this.board[i][j - 1] === undefined ||\n            this.board[i][j - 1] < BOMB)\n        ) {\n          queue.push(i, j - 1);\n        }\n        if (\n          j + 1 <= this.maxCol &&\n          (this.board[i] === undefined ||\n            this.board[i][j + 1] === undefined ||\n            this.board[i][j + 1] < BOMB)\n        ) {\n          queue.push(i, j + 1);\n        }\n      }\n    }\n  }\n\n  private distributeBombs(row: number, column: number) {\n    let bombsLeft = this.bombs;\n    let bombRow: number;\n    let bombColumn: number;\n    while (bombsLeft > 0) {\n      bombRow = Math.floor(Math.random() * this.maxRow);\n      bombColumn = Math.floor(Math.random() * this.maxCol);\n      if (\n        (bombRow === row && bombColumn === column) ||\n        (this.board[bombRow] !== undefined &&\n          this.board[bombRow][bombColumn] === BOMB)\n      ) {\n        continue;\n      }\n      if (this.board[bombRow] === undefined) {\n        this.board[bombRow] = [];\n      }\n      if (this.board[bombRow][bombColumn] < BOMB) {\n        this.nearbyHidden--;\n      }\n      this.board[bombRow][bombColumn] = BOMB;\n      this.initNearbyCells([bombRow, bombColumn]);\n      bombsLeft--;\n    }\n  }\n\n  private initNearbyCells([row, column]: CellCoordinates) {\n    for (let i = row - 1; i < row + 2; i++) {\n      for (let j = column - 1; j < column + 2; j++) {\n        if (\n          (i === row && j === column) ||\n          i < 0 ||\n          j < 0 ||\n          i > this.maxRow ||\n          j > this.maxCol\n        ) {\n          continue;\n        }\n        if (this.board[i] === undefined) {\n          this.board[i] = [];\n        }\n        switch (this.board[i][j]) {\n          case BOMB:\n            break;\n          case undefined:\n            this.board[i][j] = -2;\n            this.nearbyHidden++;\n            break;\n\n          default:\n            this.board[i][j] -= 1;\n            break;\n        }\n      }\n    }\n  }\n}\n\nexport default Minesweeper;\n","import { createContext, Dispatch } from \"react\";\nimport Minesweeper, {\n  GameParameters,\n  CellCoordinates,\n} from \"../lib/Minesweeper\";\n\nexport interface State {\n  params: GameParameters;\n  minesweeper: Minesweeper;\n}\n\nexport enum ActionType {\n  SetParams = \"SET_PARAMS\",\n  Check = \"CHECK\",\n}\n\ninterface GenericAction<TType, TPayload> {\n  payload: TPayload;\n  type: TType;\n}\n\ntype Action =\n  | GenericAction<ActionType.SetParams, GameParameters>\n  | GenericAction<ActionType.Check, CellCoordinates>;\n\nconst GameContext = createContext<{\n  state: State;\n  dispatch: Dispatch<Action>;\n}>({ state: {} as State, dispatch: () => null });\n\nexport function reducer(state: State, { type, payload }: Action): State {\n  switch (type) {\n    case ActionType.SetParams:\n      return {\n        ...state,\n        params: payload as GameParameters,\n        minesweeper: new Minesweeper(payload as GameParameters),\n      };\n\n    case ActionType.Check:\n      state.minesweeper.check(payload as CellCoordinates);\n      return {\n        ...state,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default GameContext;\n","import { CSSProperties, HTMLProps, useContext } from \"react\";\nimport { GridChildComponentProps } from \"react-window\";\nimport { BOMB, OPENED, GameState } from \"../lib/Minesweeper\";\nimport GameContext from \"./GameContext\";\n\nexport const CELL_SIZE = 50;\nconst CELL_STYLE: CSSProperties = { width: CELL_SIZE, height: CELL_SIZE };\n\ninterface Props\n  extends GridChildComponentProps,\n    Pick<HTMLProps<HTMLButtonElement>, \"onClick\" | \"onContextMenu\"> {\n  flag?: boolean;\n}\n\nfunction Cell({\n  rowIndex,\n  columnIndex,\n  style,\n  onClick,\n  onContextMenu,\n  flag = false,\n}: Props) {\n  const {\n    state: { minesweeper },\n  } = useContext(GameContext);\n\n  let className = \"button\";\n\n  let val: undefined | number =\n    minesweeper.board[rowIndex] && minesweeper.board[rowIndex][columnIndex];\n  let body: undefined | string | number = val;\n\n  if (\n    minesweeper.state === GameState.Lost ||\n    minesweeper.state === GameState.Won\n  ) {\n    if (val === BOMB) {\n      body = \"💣\";\n    }\n    switch (val) {\n      case BOMB:\n        body = \"💣\";\n        break;\n      case OPENED:\n      case undefined:\n        body = undefined;\n        break;\n\n      default:\n        if (val < BOMB) {\n          body = val * -1 - 1;\n        }\n        break;\n    }\n  } else if (flag && (val < OPENED || val === undefined)) {\n    body = \"🚩\";\n  } else if (val <= BOMB) {\n    body = undefined;\n  } else if (val === OPENED) {\n    body = undefined;\n  }\n\n  return (\n    <div className=\"cell\" style={style}>\n      <button\n        data-row={rowIndex}\n        data-column={columnIndex}\n        style={CELL_STYLE}\n        className={className}\n        onClick={onClick}\n        onContextMenu={onContextMenu}\n        disabled={\n          val === OPENED ||\n          val > 0 ||\n          minesweeper.state === GameState.Lost ||\n          minesweeper.state === GameState.Won\n        }\n      >\n        {body}\n      </button>\n    </div>\n  );\n}\n\nexport default Cell;\n","import { MouseEventHandler, useContext, useEffect, useState } from \"react\";\nimport { FixedSizeGrid } from \"react-window\";\nimport useResizeObserver from \"use-resize-observer\";\nimport GameContext, { ActionType } from \"./GameContext\";\nimport Cell, { CELL_SIZE } from \"./Cell\";\nimport { CellCoordinates } from \"../lib/Minesweeper\";\n\nfunction getCoordinates(target: any): CellCoordinates {\n  return [\n    parseInt(target.dataset[\"row\"], 10),\n    parseInt(target.dataset[\"column\"], 10),\n  ];\n}\n\ninterface Flags {\n  [row: number]: { [column: number]: boolean };\n}\n\nfunction Board() {\n  const { ref, width, height } = useResizeObserver<HTMLDivElement>();\n  const [flags, setFlags] = useState<Flags>({});\n  const {\n    state: { params, minesweeper },\n    dispatch,\n  } = useContext(GameContext);\n  useEffect(() => setFlags({}), [minesweeper]);\n  const handleClick: MouseEventHandler<HTMLButtonElement> = (e) => {\n    const target: any = e.target;\n    const [row, column] = getCoordinates(target);\n    if (flags[row] && flags[row][column]) {\n      return;\n    }\n    dispatch({\n      type: ActionType.Check,\n      payload: [row, column],\n    });\n  };\n\n  const handleContextMenu: MouseEventHandler<HTMLButtonElement> = (e) => {\n    if (e.type === \"contextmenu\") {\n      e.preventDefault();\n      const newFlags = {\n        ...flags,\n      };\n      const [row, column] = getCoordinates(e.target);\n      if (!newFlags[row]) {\n        newFlags[row] = {};\n      }\n      newFlags[row][column] = !newFlags[row][column];\n      setFlags(newFlags);\n    }\n  };\n\n  return (\n    <div ref={ref} className=\"container full-height\">\n      {width && height && (\n        <FixedSizeGrid\n          columnCount={params.columns}\n          rowCount={params.rows}\n          columnWidth={CELL_SIZE}\n          rowHeight={CELL_SIZE}\n          width={width}\n          height={height}\n        >\n          {(props) => (\n            <Cell\n              {...props}\n              flag={\n                flags[props.rowIndex] &&\n                flags[props.rowIndex][props.columnIndex]\n              }\n              onClick={handleClick}\n              onContextMenu={handleContextMenu}\n            />\n          )}\n        </FixedSizeGrid>\n      )}\n    </div>\n  );\n}\n\nexport default Board;\n","function parsePositiveNumber(input: string) {\n  const result = parseInt(input, 10);\n  if (!result || result < 0) {\n    return 0;\n  }\n  return result;\n}\n\nexport default parsePositiveNumber;\n","import React, { FormEvent, useContext, useState } from \"react\";\nimport { GameParameters, GameState } from \"../lib/Minesweeper\";\nimport parsePositiveNumber from \"../utils/parsePositiveNumber\";\nimport GameContext, { ActionType } from \"./GameContext\";\n\nfunction GameSetup() {\n  const { state, dispatch } = useContext(GameContext);\n  const [formData, setFormData] = useState<GameParameters>(state.params);\n  const handleChange = ({\n    target: { id, value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ ...formData, [id]: parsePositiveNumber(value) });\n  };\n\n  const formIsValid = Object.values(formData).every((value: number) => value);\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (formIsValid) {\n      dispatch({ type: ActionType.SetParams, payload: formData });\n    }\n  };\n\n  let startButtonBody;\n  switch (state.minesweeper.state) {\n    case GameState.Lost:\n      startButtonBody = \"😵\";\n      break;\n\n    case GameState.Won:\n      startButtonBody = \"😎\";\n      break;\n\n    default:\n      startButtonBody = \"😀\";\n      break;\n  }\n\n  return (\n    <form className=\"container pb-3\" onSubmit={handleSubmit}>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"rows\">\n              Rows\n            </label>\n            <div className=\"control\">\n              <input\n                id=\"rows\"\n                name=\"rows\"\n                type=\"number\"\n                className=\"input\"\n                autoComplete=\"off\"\n                value={formData?.rows.toString()}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"column\">\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"columns\">\n              Columns\n            </label>\n            <div className=\"control\">\n              <input\n                id=\"columns\"\n                name=\"columns\"\n                className=\"input\"\n                autoComplete=\"off\"\n                type=\"number\"\n                value={formData?.columns.toString()}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"column\">\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"bombs\">\n              Bombs\n            </label>\n            <div className=\"control\">\n              <input\n                id=\"bombs\"\n                name=\"bombs\"\n                className=\"input\"\n                autoComplete=\"off\"\n                type=\"number\"\n                value={formData?.bombs.toString()}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"has-text-centered\">\n        <button\n          className=\"button is-primary is-large\"\n          disabled={!formIsValid}\n          type=\"submit\"\n        >\n          {startButtonBody}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default GameSetup;\n","import React, { useReducer } from \"react\";\nimport Board from \"./Board\";\nimport GameContext, { reducer, State } from \"./GameContext\";\nimport GameSetup from \"./GameSetup\";\nimport \"./Game.css\";\nimport Minesweeper, { GameParameters } from \"../lib/Minesweeper\";\n\nconst initialParams: GameParameters = {\n  rows: 1000,\n  columns: 1000,\n  bombs: 20000,\n};\nconst initialState: State = {\n  params: initialParams,\n  minesweeper: new Minesweeper(initialParams),\n};\n\nfunction Game() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <div className=\"is-flex is-flex-direction-column game\">\n        <section className=\"hero\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">Minesweeper Game</h1>\n              <h2 className=\"subtitle\">\n                <a href=\"https://github.com/dn-l/react-minesweeper\">\n                  github.com/dn-l/react-minesweeper\n                </a>\n              </h2>\n            </div>\n          </div>\n        </section>\n        <section>\n          <GameSetup />\n        </section>\n        <section className=\"is-flex-grow-1 pb-5\">\n          <Board />\n        </section>\n      </div>\n    </GameContext.Provider>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}